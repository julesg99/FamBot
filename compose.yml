services:
  postgres:
    image: postgres:15
    restart: always
    volumes:
      - ./apps/postgres/data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s
  graphql-engine:
    image: hasura/graphql-engine:v2.38.0
    ports:
      - "${HASURA_GRAPHQL_SERVER_PORT}:${HASURA_GRAPHQL_SERVER_PORT}"
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my-network
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${HASURA_GRAPHQL_SERVER_PORT}/healthz",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.38.0
    restart: always
    ports:
      - 8081:8081
    env_file:
      - .env
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 600s
      timeout: 10s
      retries: 5
      start_period: 5s
  fambot:
    build:
      context: ./apps/discord-bot
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      graphql-engine:
        condition: service_healthy
    networks:
      - my-network
networks:
  my-network:
    driver: bridge
